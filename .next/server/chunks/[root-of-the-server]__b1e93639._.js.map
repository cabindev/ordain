{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Applications/MAMP/htdocs/sdn-api/app/lib/googleSheets.ts"],"sourcesContent":["// lib/googleSheets.ts\n\nimport { google } from 'googleapis';\nimport { OrdainData,RegionalData } from '../types/ordain';\n\n/**\n * ฟังก์ชันสำหรับแปลงค่าให้เป็นตัวเลข\n */\nexport const extractNumber = (value: any): number => {\n  try {\n    if (value === undefined || value === null) return 0;\n    \n    // ถ้าเป็นตัวเลขอยู่แล้ว\n    if (typeof value === 'number') return value;\n    \n    // ถ้าเป็น string ให้แปลงเป็นตัวเลข\n    const cleanValue = String(value).replace(/,/g, '').trim();\n    const parsed = parseFloat(cleanValue);\n    return isNaN(parsed) ? 0 : parsed;\n  } catch (error) {\n    console.error('Error extracting number:', error);\n    return 0;\n  }\n};\n\n/**\n * ฟังก์ชันสำหรับดึงข้อมูลจาก Google Sheets\n */\nexport async function extractSheetData(): Promise<OrdainData> {\n  try {\n    console.log('Start extracting sheet data:', new Date().toISOString());\n    \n    // ตั้งค่า auth credentials\n    const auth = new google.auth.GoogleAuth({\n      credentials: {\n        client_email: process.env.GOOGLE_CLIENT_EMAIL,\n        private_key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\\\n/g, '\\n'),\n      },\n      scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],\n    });\n\n    const sheets = google.sheets({ version: 'v4', auth });\n    const spreadsheetId = process.env.GOOGLE_SPREADSHEET_ID;\n    \n    console.log('Fetching data from sheet:', spreadsheetId);\n    \n    // ดึงข้อมูลจากชีต API Data\n    const response = await sheets.spreadsheets.values.get({\n      spreadsheetId,\n      range: 'API Data!A1:C30', // ชื่อชีตที่ถูกต้อง: API Data\n      valueRenderOption: 'UNFORMATTED_VALUE',\n      dateTimeRenderOption: 'FORMATTED_STRING',\n    });\n    \n    const values = response.data.values || [];\n    console.log('Fetched data rows:', values.length);\n    \n    if (values.length === 0) {\n      throw new Error('No data found in API Data sheet');\n    }\n    \n    // แปลงข้อมูลเป็น key-value object\n    const dataMap: Record<string, any> = {};\n    const regionalData: RegionalData[] = [];\n    let isRegionSection = false;\n    \n    // วนลูปผ่านข้อมูลที่ได้รับ\n    for (const row of values) {\n      if (!row[0]) continue; // ข้ามแถวที่ไม่มีข้อมูลในคอลัมน์ A\n      \n      const key = String(row[0]).trim();\n      \n      // ตรวจสอบว่ากำลังอยู่ในส่วนของภูมิภาคหรือไม่\n      if (key === 'region') {\n        isRegionSection = true;\n        continue;\n      }\n      \n      // ถ้ากำลังอยู่ในส่วนของข้อมูลภูมิภาค\n      if (isRegionSection) {\n        // เก็บข้อมูลภูมิภาค\n        const value = extractNumber(row[1]);\n        const percentage = row.length > 2 ? extractNumber(row[2]) : 0;\n        \n        regionalData.push({\n          name: key,\n          value: value,\n          percentage: percentage\n        });\n      } else {\n        // เก็บข้อมูลทั่วไป\n        dataMap[key] = row[1];\n      }\n    }\n    \n    console.log('Data mapped:', Object.keys(dataMap).length);\n    console.log('Regional data:', regionalData.length);\n    \n    // สร้าง OrdainData จาก dataMap\n    const data: OrdainData = {\n      projectName: String(dataMap['projectName'] || \"โครงการบวชสร้างสุข\"),\n      projectSubtitle: String(dataMap['projectSubtitle'] || \"พื้นที่ปลอดภัยที่มีการควบคุมการดื่มเครื่องดื่มแอลกอฮอล์ในงานบุญประเพณี\"),\n      timestamp: new Date().getTime(),\n      implementationArea: {\n        count: String(dataMap['implementationArea'] || \"0\"),\n        unit: 'พื้นที่',\n      },\n      policyExpansionArea: {\n        count: String(dataMap['policyArea'] || \"0\"),\n        unit: 'พื้นที่',\n      },\n      alcoholReduction: {\n        total: String(dataMap['alcoholReduction'] || \"0\"),\n        templeEvents: String(dataMap['templeEvents'] || \"0\"),\n        communityEvents: String(dataMap['communityEvents'] || \"0\"),\n      },\n      modelMonks: {\n        count: String(dataMap['modelMonks'] || \"0\"),\n        unit: \"รูป\",\n      },\n      savings: {\n        alcoholSavings: String(dataMap['alcoholSavings'] || \"0\"),\n        expensePerMonk: String(dataMap['expensePerMonk'] || \"0\"),\n      },\n      policy: {\n        count: String(dataMap['policy'] || \"0\"),\n        unit: \"พื้นที่\",\n      },\n      regionalData: regionalData.length > 0 ? regionalData : undefined,\n    };\n    \n    console.log('Data successfully processed');\n    return data;\n    \n  } catch (error) {\n    console.error('Error extracting sheet data:', error);\n    \n    // ส่งคืนข้อมูลว่างเปล่าแทนที่จะใช้ข้อมูลตัวอย่าง\n    return {\n      projectName: \"โครงการบวชสร้างสุข\",\n      projectSubtitle: \"พื้นที่ปลอดภัยที่มีการควบคุมการดื่มเครื่องดื่มแอลกอฮอล์ในงานบุญประเพณี\",\n      timestamp: new Date().getTime(),\n      implementationArea: {\n        count: \"0\",\n        unit: 'พื้นที่',\n      },\n      policyExpansionArea: {\n        count: \"0\",\n        unit: 'พื้นที่',\n      },\n      alcoholReduction: {\n        total: \"0\",\n        templeEvents: \"0\",\n        communityEvents: \"0\",\n      },\n      modelMonks: {\n        count: \"0\",\n        unit: \"รูป\",\n      },\n      savings: {\n        alcoholSavings: \"0\",\n        expensePerMonk: \"0\",\n      },\n      policy: {\n        count: \"0\",\n        unit: \"พื้นที่\",\n      },\n      regionalData: [],\n    };\n  }\n}\n\n/**\n * ฟังก์ชันสำหรับตรวจสอบการเชื่อมต่อกับ Google Sheets\n */\nexport async function testGoogleSheetsConnection() {\n  try {\n    console.log('Testing connection to Google Sheets...');\n    \n    // ตรวจสอบว่ามี credentials ที่จำเป็นหรือไม่\n    if (!process.env.GOOGLE_CLIENT_EMAIL) {\n      return {\n        success: false,\n        message: 'GOOGLE_CLIENT_EMAIL ไม่ได้ถูกกำหนดในตัวแปรสภาพแวดล้อม',\n        timestamp: new Date().toISOString()\n      };\n    }\n    \n    if (!process.env.GOOGLE_PRIVATE_KEY) {\n      return {\n        success: false,\n        message: 'GOOGLE_PRIVATE_KEY ไม่ได้ถูกกำหนดในตัวแปรสภาพแวดล้อม',\n        timestamp: new Date().toISOString()\n      };\n    }\n    \n    if (!process.env.GOOGLE_SPREADSHEET_ID) {\n      return {\n        success: false,\n        message: 'GOOGLE_SPREADSHEET_ID ไม่ได้ถูกกำหนดในตัวแปรสภาพแวดล้อม',\n        timestamp: new Date().toISOString()\n      };\n    }\n    \n    // ตั้งค่า auth credentials\n    const auth = new google.auth.GoogleAuth({\n      credentials: {\n        client_email: process.env.GOOGLE_CLIENT_EMAIL,\n        private_key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\\\n/g, '\\n'),\n      },\n      scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],\n    });\n\n    const sheets = google.sheets({ version: 'v4', auth });\n    const spreadsheetId = process.env.GOOGLE_SPREADSHEET_ID;\n    \n    // ทดสอบดึงข้อมูลจากชีต API Data\n    const testResponse = await sheets.spreadsheets.values.get({\n      spreadsheetId,\n      range: 'API Data!A1:C5',\n    });\n    \n    // ตรวจสอบผลลัพธ์\n    if (!testResponse.data.values || testResponse.data.values.length === 0) {\n      return {\n        success: false,\n        message: 'เชื่อมต่อสำเร็จแต่ไม่พบข้อมูลในช่วงที่ระบุ',\n        timestamp: new Date().toISOString(),\n        details: { responseStatus: testResponse.status }\n      };\n    }\n    \n    // ดึงชื่อชีตทั้งหมด\n    const sheetsInfo = await sheets.spreadsheets.get({\n      spreadsheetId\n    });\n    \n    const sheetNames = sheetsInfo.data.sheets?.map(sheet => sheet.properties?.title) || [];\n    \n    return {\n      success: true,\n      message: 'เชื่อมต่อกับ Google Sheets สำเร็จ',\n      timestamp: new Date().toISOString(),\n      details: { \n        sampleData: testResponse.data.values,\n        responseStatus: testResponse.status,\n        availableSheets: sheetNames\n      }\n    };\n  } catch (error) {\n    console.error('Error testing connection:', error);\n    return {\n      success: false,\n      message: `เกิดข้อผิดพลาดในการเชื่อมต่อกับ Google Sheets: ${error.message}`,\n      timestamp: new Date().toISOString(),\n      details: { error: error.message }\n    };\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":["file:///Applications/MAMP/htdocs/sdn-api/app/api/ordain/route.ts"],"sourcesContent":["// app/api/ordain/route.ts\n\nimport { NextResponse } from 'next/server';\nimport { extractSheetData } from '@/app/lib/googleSheets';\n\nexport const dynamic = 'force-dynamic'; // ป้องกันการแคชผลลัพธ์ของ API\nexport const revalidate = 0; // บังคับรีเฟรชข้อมูลทุกครั้งที่เรียกใช้\n\nexport async function GET(req: Request) {\n  try {\n    console.log('API request started:', new Date().toISOString());\n    \n    // ดึงข้อมูลจาก Google Sheets\n    const data = await extractSheetData();\n    \n    console.log('Data successfully extracted');\n    \n    // ส่งข้อมูลกลับพร้อมตั้งค่า header เพื่อป้องกันการแคช\n    return NextResponse.json(\n      { data, source: 'google_sheets' },\n      { \n        headers: {\n          'Cache-Control': 'no-store, max-age=0, must-revalidate',\n          'Expires': '0',\n          'Pragma': 'no-cache'\n        } \n      }\n    );\n  } catch (error) {\n    console.error('Error in API route:', error);\n    \n    // ส่งข้อมูลว่างเปล่าเมื่อเกิดข้อผิดพลาด\n    return NextResponse.json(\n      { \n        data: {\n          projectName: \"โครงการบวชสร้างสุข\",\n          projectSubtitle: \"พื้นที่ปลอดภัยที่มีการควบคุมการดื่มเครื่องดื่มแอลกอฮอล์ในงานบุญประเพณี\",\n          timestamp: new Date().getTime(),\n          implementationArea: {\n            count: \"0\",\n            unit: 'พื้นที่',\n          },\n          policyExpansionArea: {\n            count: \"0\",\n            unit: 'พื้นที่',\n          },\n          alcoholReduction: {\n            total: \"0\",\n            templeEvents: \"0\",\n            communityEvents: \"0\",\n          },\n          modelMonks: {\n            count: \"0\",\n            unit: \"รูป\",\n          },\n          savings: {\n            alcoholSavings: \"0\",\n            expensePerMonk: \"0\",\n          },\n          policy: {\n            count: \"0\",\n            unit: \"พื้นที่\",\n          },\n          regionalData: [],\n        }, \n        source: 'error_fallback',\n        error: {\n          message: 'เกิดข้อผิดพลาดในการเข้าถึงข้อมูล Google Sheet',\n          details: error instanceof Error ? error.message : String(error)\n        }\n      },\n      { \n        headers: {\n          'Cache-Control': 'no-store, max-age=0, must-revalidate',\n          'Expires': '0',\n          'Pragma': 'no-cache'\n        } \n      }\n    );\n  }\n}"],"names":[],"mappings":"AAAA,0BAA0B;;;;;;AAE1B;AACA;;;AAEO,MAAM,UAAU,iBAAiB,8BAA8B;AAC/D,MAAM,aAAa,GAAG,wCAAwC;AAE9D,eAAe,IAAI,GAAY;IACpC,IAAI;QACF,QAAQ,GAAG,CAAC,wBAAwB,IAAI,OAAO,WAAW;QAE1D,6BAA6B;QAC7B,MAAM,OAAO,MAAM,CAAA,GAAA,4HAAA,CAAA,mBAAgB,AAAD;QAElC,QAAQ,GAAG,CAAC;QAEZ,sDAAsD;QACtD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE;YAAM,QAAQ;QAAgB,GAChC;YACE,SAAS;gBACP,iBAAiB;gBACjB,WAAW;gBACX,UAAU;YACZ;QACF;IAEJ,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QAErC,wCAAwC;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,MAAM;gBACJ,aAAa;gBACb,iBAAiB;gBACjB,WAAW,IAAI,OAAO,OAAO;gBAC7B,oBAAoB;oBAClB,OAAO;oBACP,MAAM;gBACR;gBACA,qBAAqB;oBACnB,OAAO;oBACP,MAAM;gBACR;gBACA,kBAAkB;oBAChB,OAAO;oBACP,cAAc;oBACd,iBAAiB;gBACnB;gBACA,YAAY;oBACV,OAAO;oBACP,MAAM;gBACR;gBACA,SAAS;oBACP,gBAAgB;oBAChB,gBAAgB;gBAClB;gBACA,QAAQ;oBACN,OAAO;oBACP,MAAM;gBACR;gBACA,cAAc,EAAE;YAClB;YACA,QAAQ;YACR,OAAO;gBACL,SAAS;gBACT,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO;YAC3D;QACF,GACA;YACE,SAAS;gBACP,iBAAiB;gBACjB,WAAW;gBACX,UAAU;YACZ;QACF;IAEJ;AACF","debugId":null}}]
}